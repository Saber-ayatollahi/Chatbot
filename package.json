{
  "name": "fund-management-chatbot",
  "version": "1.0.0",
  "description": "Intelligent chatbot for fund management using OpenAI with RAG capabilities",
  "main": "server.js",
  "scripts": {
    "prestart": "node scripts/validateEnvironment.js",
    "start": "node server.js",
    "dev": "concurrently \"npm run server\" \"npm run client\"",
    "server": "nodemon server.js",
    "client": "cd client && npm start",
    "build": "cd client && npm run build",
    "install-all": "npm install && cd client && npm install",
    "db:init": "node scripts/initializeDatabase.js",
    "db:migrate": "node scripts/migrateDatabase.js",
    "db:migrate:vector": "psql -f database/migration_001_fix_vector_dimensions.sql",
    "db:seed": "node scripts/seedDatabase.js",
    "ingest": "node scripts/ingestDocuments.js",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:regression": "node scripts/runRegressionTests.js",
    "test:performance": "jest tests/performance",
    "test:ab": "node scripts/runABTests.js",
    "generate:dataset": "node scripts/generateGoldenDataset.js",
    "evaluate:quality": "npm run test:regression",
    "benchmark:performance": "npm run test:performance",
    "report:evaluation": "echo 'Evaluation report generated in CI/CD pipeline'",
    "setup:phase5": "node scripts/setupPhase5.js",
    "validate:phase5": "node scripts/validatePhase5.js",
    "compliance:daily": "node -e \"const ComplianceReportGenerator = require('./services/ComplianceReportGenerator'); const gen = new ComplianceReportGenerator(); gen.generateDailySummary(new Date()).then(console.log).catch(console.error);\"",
    "compliance:monthly": "node -e \"const ComplianceReportGenerator = require('./services/ComplianceReportGenerator'); const gen = new ComplianceReportGenerator(); gen.generateMonthlyStatusReport(new Date()).then(console.log).catch(console.error);\"",
    "encrypt:validate": "node -e \"const EncryptionManager = require('./services/EncryptionManager'); const em = new EncryptionManager(); em.initialize().then(() => em.validateIntegrity()).then(console.log).then(() => em.close()).catch(console.error);\"",
    "audit:export": "node -e \"const AuditLogger = require('./services/AuditLogger'); const al = new AuditLogger(); al.getAuditLogs({}, {limit: 1000, offset: 0}).then(logs => console.log(JSON.stringify(logs, null, 2))).catch(console.error);\"",
    "rbac:create-user": "node -e \"const RBACManager = require('./services/RBACManager'); const rbac = new RBACManager(); rbac.initialize().then(() => { const userData = process.argv.slice(2); if(userData.length < 4) { console.log('Usage: npm run rbac:create-user username password email role'); process.exit(1); } return rbac.createUser({username: userData[0], password: userData[1], email: userData[2], role: userData[3]}); }).then(console.log).then(() => rbac.close()).catch(console.error);\"",
    "data:cleanup": "node -e \"const DataLifecycleManager = require('./services/DataLifecycleManager'); const dlm = new DataLifecycleManager(); dlm.initialize().then(() => dlm.runDataCleanup()).then(console.log).then(() => dlm.close()).catch(console.error);\"",
    "setup:phase6": "node scripts/setupPhase6.js",
    "validate:phase6": "node scripts/validatePhase6.js",
    "kb:sync": "node -e \"const KnowledgeBaseMaintenanceSystem = require('./services/KnowledgeBaseMaintenanceSystem'); const kb = new KnowledgeBaseMaintenanceSystem(); kb.initialize().then(() => kb.detectExternalChanges('./knowledge_base/documents')).then(changes => { console.log('Changes detected:', changes.length); changes.forEach(c => console.log('- ' + c.type + ': ' + c.documentId)); }).then(() => kb.close()).catch(console.error);\"",
    "kb:stats": "node -e \"const KnowledgeBaseMaintenanceSystem = require('./services/KnowledgeBaseMaintenanceSystem'); const kb = new KnowledgeBaseMaintenanceSystem(); kb.initialize().then(() => kb.getSystemStatistics()).then(stats => console.log(JSON.stringify(stats, null, 2))).then(() => kb.close()).catch(console.error);\"",
    "feedback:analyze": "node -e \"const FeedbackAnalysisSystem = require('./services/FeedbackAnalysisSystem'); const fas = new FeedbackAnalysisSystem(); fas.initialize().then(() => fas.analyzeTrends()).then(trends => { console.log('Trends found:', trends.length); trends.forEach(t => console.log('- ' + t.type + ': ' + t.direction)); }).then(() => fas.close()).catch(console.error);\"",
    "feedback:recommendations": "node -e \"const FeedbackAnalysisSystem = require('./services/FeedbackAnalysisSystem'); const fas = new FeedbackAnalysisSystem(); fas.initialize().then(() => fas.generateImprovementRecommendations()).then(recs => { console.log('Recommendations generated:', recs.length); recs.forEach(r => console.log('- ' + r.priority + ': ' + r.title)); }).then(() => fas.close()).catch(console.error);\"",
    "ft:create-dataset": "node -e \"const ModelFineTuningService = require('./services/ModelFineTuningService'); const ft = new ModelFineTuningService(); ft.initialize().then(() => ft.createTrainingDataset('Sample Dataset', 'style_tone', 'Sample dataset for testing')).then(id => console.log('Dataset created with ID:', id)).then(() => ft.close()).catch(console.error);\"",
    "ft:status": "node -e \"const ModelFineTuningService = require('./services/ModelFineTuningService'); const ft = new ModelFineTuningService(); ft.initialize().then(() => console.log('Model Fine-Tuning Service is ready')).then(() => ft.close()).catch(console.error);\"",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "format": "prettier --write .",
    "health": "node scripts/healthCheck.js",
    "backup": "node scripts/backupDatabase.js",
    "validate:env": "node scripts/validateEnvironment.js",
    "validate:critical": "node scripts/validate-critical-fixes.js",
    "test:critical": "npm run validate:env && npm run test __tests__/unit/critical-fixes.test.js",
    "test:critical-fixes": "node scripts/test-critical-fixes.sh",
    "test:pgvector": "node scripts/test-pgvector-installation.js",
    "install:pgvector": "scripts\\install-pgvector-manual.bat",
    "test:unit": "jest tests/unit",
    "test:integration": "jest tests/integration",
    "test:all": "npm run lint && npm run test:coverage && npm run test:performance",
    "format:check": "prettier --check .",
    "quality": "npm run lint && npm run format:check",
    "load-test": "artillery run tests/performance/artillery-config.yml",
    "security-audit": "npm audit --audit-level moderate"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "body-parser": "^1.20.2",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "crypto": "^1.0.1",
    "date-fns": "^2.30.0",
    "dotenv": "^16.3.1",
    "exceljs": "^4.4.0",
    "express": "^4.18.2",
    "express-rate-limit": "^7.1.5",
    "express-validator": "^7.0.1",
    "fs-extra": "^11.1.1",
    "helmet": "^7.1.0",
    "html-to-text": "^9.0.5",
    "jsonwebtoken": "^9.0.2",
    "lodash.debounce": "^4.0.8",
    "mammoth": "^1.11.0",
    "marked": "^16.3.0",
    "mime-types": "^2.1.35",
    "morgan": "^1.10.0",
    "multer": "^2.0.2",
    "natural": "^6.5.0",
    "node-cron": "^3.0.3",
    "node-fetch": "^3.3.2",
    "openai": "^4.20.1",
    "pdf-parse": "^1.1.1",
    "pdf2pic": "^2.1.4",
    "pdfkit": "^0.17.2",
    "pg": "^8.11.3",
    "sharp": "^0.32.6",
    "tesseract.js": "^5.0.2",
    "tiktoken": "^1.0.10",
    "uuid": "^9.0.1",
    "winston": "^3.17.0",
    "winston-daily-rotate-file": "^4.7.1",
    "ws": "^8.18.3"
  },
  "devDependencies": {
    "@types/jest": "^29.5.8",
    "artillery": "^2.0.0",
    "benchmark": "^2.1.4",
    "concurrently": "^8.2.2",
    "eslint": "^8.0.0",
    "jest": "^29.0.0",
    "nodemon": "^3.0.2",
    "prettier": "^2.0.0",
    "supertest": "^6.3.3"
  },
  "keywords": [
    "chatbot",
    "openai",
    "fund-management",
    "rag",
    "vector-database",
    "pgvector",
    "compliance",
    "audit"
  ],
  "author": "Fund Management Team",
  "license": "MIT",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "jest": {
    "testEnvironment": "node",
    "setupFilesAfterEnv": [
      "<rootDir>/__tests__/setup.js"
    ],
    "collectCoverageFrom": [
      "**/*.js",
      "!node_modules/**",
      "!client/**",
      "!coverage/**",
      "!logs/**",
      "!backups/**"
    ],
    "testMatch": [
      "**/__tests__/**/*.test.js",
      "**/__tests__/unit/**/*.js",
      "**/__tests__/integration/**/*.js",
      "**/__tests__/evaluation/**/*.js",
      "**/?(*.)+(spec|test).js"
    ],
    "testPathIgnorePatterns": [
      "/__tests__/mocks/",
      "/__tests__/setup.js",
      "/__tests__/utils/"
    ]
  }
}
